## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function

# 1 - makeCacheMatri: this function can be any values. these functions create variables, some of which are defined as functions, and they use the functions 
# to move these data in and out of the cache environment and to perform operations on these data.

# makeCacheMatrix receives a matrix variable, and sets variables and functions in memory, 
# and returns a list of functions nested within makeCacheMatrix.



makeCacheMatrix <- function(x = numeric()) {
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) m <<- inverse
  getinverse <- function() m
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse)
}




## Write a short comment describing this function

# 2.  cacheSolve: This function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above. If the inverse has
# already been calculated (and the matrix has not changed), then `cacheSolve` should retrieve the inverse from the cache.

# cacheSolve function receives a variable that is a matrix that is expected to have been defined as makeCacheMatrix(),
# as in inverse <- makeCacheMatrix(), and then populated with an invertible matrix using the inverse$set()
# in makeCacheMatrix(). In this syntax, the variable "m" can be any values. 

# cacheSolve returns the inverted form of the submitted matrix.

cacheSolve <- function(x, ...) {
  m <- x$getinverse()
  if(!is.null(m)) {
    message("getting cached data")
    return(m)
  }
  data <- x$get()
  m <- solve(data, ...)
  x$setinverse(m)
  m
}

